#include "../include/msgs.h"
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <errno.h>
#include <signal.h>
#include <pwd.h>
#include <limits.h>
void handler_function(int signal){
  if(signal == SIGINT){
    
  }
}


int main(){

  signal(SIGINT, handler_function);
  char input[INT_MAX];
  char cwd[INT_MAX];

  while(1){

    if(getcwd(cwd, sizeof(cwd)) == NULL) {
      write(STDERR_FILENO, FORMAT_MSG("shell", GETCWD_ERROR_MSG), strlen(FORMAT_MSG("shell", GETCWD_ERROR_MSG)));
      exit(1);
    }

    write(STDOUT_FILENO, cwd, strlen(cwd));
    write(STDOUT_FILENO, "$", 2);

    ssize_t n = read(STDIN_FILENO, input, sizeof(input));

    if(n == -1){
      write(STDERR_FILENO, FORMAT_MSG("shell", READ_ERROR_MSG), strlen(FORMAT_MSG("shell", READ_ERROR_MSG)));
      exit(1);
    }

    input[strlen(input) - 1] = '\0';

    //handling background
    int background = 0;
    if(input[strlen(input) - 1] == '&'){
      background = 1;
      input[strlen(input) - 1] = '\0';
    }
    
    
    char *args[INT_MAX];
    int total_arg = 0;
    char *token = strtok(input, " ");
    
    while(token != NULL){
      args[total_arg] = token;
      token = strtok(NULL, " ");
      total_arg++;
    }
    args[total_arg] = NULL;

    
   /* char *args[32];
    char *token;
    A
    char *saveptr;

    int total_arg = 0;
    char *input2 = strdup(input);
    B
    A

    token = strtok_r(input2, " ", &saveptr);
    while(token!=NULL && total_arg < 31){
      args[total_arg] = token;
      total_arg++;
      token = strtok_r(NULL, " ", &saveptr);
    }
    args[total_arg] = NULL;
    A
    free(input2);
*/

    if(total_arg > 0){

      if(strcmp(args[0], "exit") == 0){

        if(total_arg > 1){
          //write(STDERR_FILENO, FORMAT_MSG("exit", TMA_MSG), strlen(FORMAT_MSG("exit", TMA_MSG)));  
          //write(STDERR_FILENO, "\n", 2);
          write(STDERR_FILENO, FORMAT_MSG("exit", TMA_MSG), strlen(FORMAT_MSG("exit", TMA_MSG)));
          write(STDERR_FILENO, "\n", 0);
        }

        else{
          exit(0);
        }

      }
      else if(strcmp(args[0], "pwd") == 0){
        
        if(total_arg > 1){
          write(STDERR_FILENO, FORMAT_MSG("pwd", TMA_MSG), strlen(FORMAT_MSG("pwd", TMA_MSG)));
        }        
        else{
          char* curr_dir = getcwd(NULL, 0);
        
          if(curr_dir == NULL){
            write(STDERR_FILENO, FORMAT_MSG("pwd", GETCWD_ERROR_MSG), strlen(FORMAT_MSG("pwd", GETCWD_ERROR_MSG)));
          }
          
          else{
            write(STDOUT_FILENO, curr_dir, strlen(curr_dir));
            //write(STDOUT_FILENO, "\n", 1);
            free(curr_dir);
          }
        }
        
      }
      else if(strcmp(args[0], "cd") == 0){
        
        if(total_arg>2){
          write(STDERR_FILENO, FORMAT_MSG("cd", TMA_MSG), strlen(FORMAT_MSG("cd", TMA_MSG)));
        }
        
        else{
          char* change_to = args[1];
        
          if(change_to == NULL || strcmp(change_to, "~") == 0){
            struct passwd *pw = getpwuid(getuid());
            change_to = pw->pw_dir;  
          }
          
          else if(strcmp(change_to, "-") == 0){
            change_to = getenv("OLDPWD");
            if(change_to == NULL){
              write(STDERR_FILENO, "cd: OLDPWD not set\n", 18);
            }
          }

          if(chdir(change_to) == -1){
            write(STDERR_FILENO, FORMAT_MSG("cd", CHDIR_ERROR_MSG), strlen(FORMAT_MSG("cd", CHDIR_ERROR_MSG)));
          }
        }
      }
        /*else{
          if(strcmp(args[1], "~") == 0){
            struct passwd *pw = getpwuid(getuid());
            if(pw != NULL){
              change_to = pw->pw_dir;
            }
            else{
              write(STDERR_FILENO, "cd: unable to get user's home directory\n", 42);
            }
          }
          else if (strcmp(args[1], "-") == 0){
            char *prev_dir = getenv("OLDPWD");
            if(prev_dir!=NULL){
              change_to = prev_dir;
            }
            else{
              write(STDERR_FILENO, "cd: unable to get previous directory\n", 38);
            }
          }
          else{
            change_to = args[1];
          }
          if(change_to != NULL){
            if(chdir(change_to) == -1){
              write(STDERR_FILENO, FORMAT_MSG("cd", CHDIR_ERROR_MSG), strlen(FORMAT_MSG("cd", CHDIR_ERROR_MSG)));
            }
            else{
              char *oldpwd = getcwd(NULL, 0);
              if(oldpwd != NULL){
                setenv("OLDPWD", oldpwd, 1);
              }
            }
          }
        }*/        
      else if (strcmp(args[0], "help") == 0){
        if(total_arg > 2){
          write(STDERR_FILENO, FORMAT_MSG("help", TMA_MSG), strlen(FORMAT_MSG("help", TMA_MSG)));
        }
        else{
          if(total_arg == 2){
            if(strcmp(args[1], "cd") == 0){
              write(STDOUT_FILENO, FORMAT_MSG("cd", CD_HELP_MSG), strlen(FORMAT_MSG("cd", CD_HELP_MSG)));
            }
            else if(strcmp(args[1], "exit") == 0){
              write(STDOUT_FILENO, FORMAT_MSG("exit", EXIT_HELP_MSG), strlen(FORMAT_MSG("exit", EXIT_HELP_MSG)));
            }
            else if(strcmp(args[1], "pwd") == 0){
              write(STDOUT_FILENO, FORMAT_MSG("pwd", PWD_HELP_MSG), strlen(FORMAT_MSG("pwd",PWD_HELP_MSG)));
            }
            else if (strcmp(args[1], "help") == 0){
              write(STDOUT_FILENO, FORMAT_MSG("help", HELP_HELP_MSG), strlen(FORMAT_MSG("help", HELP_HELP_MSG)));
            }
            else{
              write(STDOUT_FILENO, args[1], strlen(args[1]));
              write(STDOUT_FILENO, FORMAT_MSG("", EXTERN_HELP_MSG), strlen(FORMAT_MSG("", EXTERN_HELP_MSG)));
            }
          }
          else{
          write(STDOUT_FILENO, FORMAT_MSG("cd", CD_HELP_MSG), strlen(FORMAT_MSG("cd", CD_HELP_MSG)));
          write(STDOUT_FILENO, FORMAT_MSG("exit", EXIT_HELP_MSG), strlen(FORMAT_MSG("exit", EXIT_HELP_MSG)));
          write(STDOUT_FILENO, FORMAT_MSG("pwd", PWD_HELP_MSG), strlen(FORMAT_MSG("pwd",PWD_HELP_MSG)));
          write(STDOUT_FILENO, FORMAT_MSG("help", HELP_HELP_MSG), strlen(FORMAT_MSG("help", HELP_HELP_MSG)));
          }
        }
      }
    }

    pid_t pid = fork();
    
    if(pid < 0){
      write(STDERR_FILENO, FORMAT_MSG("shell", FORK_ERROR_MSG), strlen(FORMAT_MSG("shell", FORK_ERROR_MSG)));
      exit(1);
    }

    else if (pid == 0){
      
      if(execvp(args[0], args) == -1){
        write(STDERR_FILENO, FORMAT_MSG("shell", EXEC_ERROR_MSG), strlen(FORMAT_MSG("shell", EXEC_ERROR_MSG)));
        //fprintf(stderr, FORMAT_MSG("shell", EXEC_ERROR_MSG));
        exit(1);
      }
    }

    else{
      if (background == 0){
        int status;
        if(waitpid(pid, &status, 0) == -1){
          write(STDERR_FILENO, FORMAT_MSG("shell", WAIT_ERROR_MSG), strlen(FORMAT_MSG("shell", WAIT_ERROR_MSG)));
          exit(1);
        }
      }
      else{
        int status;
        while(waitpid(-1, &status, WNOHANG)>0);
      }
    }
  }
}
